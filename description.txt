Design Choices:

One of the more significant design decisions we had to make was how to model nodes' attributes. They "belong" to nodes like ID's do, but they have behaviors of their own relating to nodes so it would be useful to be able to access the nodes from their sig. 
We decided to have attributes be a field of node but not the other way around since if we put it in both we would have to spend a lot of time making sure they matched up.

This made enforcing that each attribute have exactly one node more roundabout since attributes don't know about their node, whereas if they did it would be easy to write a field like "belongsTo: one Node" and utilize the multiplicity keyword.

We also made attributes responsible for what they drive and are driven by even though when using Maya it might intuitively seem that this should be the responsibility of a node because attributes are responsible for their individual values which is all that "driving" changes. Additionally multiple attributes can belong to the same node and drive each other so it would not make sense to keep track of that using nodes.

We did decide to have attributes keep track of what they were driven by as well as what was driving them even though this meant extra bookkeeping. This was most important when breaking connections because each node must know what it's driving in order to reset them all to default values when their driver is deleted, but then we also have to update the driving field of the node driving the node to be deleted which is most simply done by giving it direct access to that node. The driven keyword is also good because each attribute can know whether it's being driven or not which would probably be useful when actually programming the behavior of the software, checking for consistency, and ???dealing with locking behavior since you have to see whether the node is connected to a cycle in any direction.??? 

Some facts we discovered that we needed during the modelling process were due to the concept of the Network of currently used nodes that we did not sufficiently consider during planning. The Network sig holds all the nodes that are currently active (as in would show up on screen were you using Maya). Originally we wrote a sig fact that it should contain all the nodes, but we hard to rework our thinking of it because Alloy is not dynamic and when we "create" nodes between timesteps we are not adding new sigs to the instance. We realized this would mean that nodes would need to exist outside the Network so that we could create, ie add them to it.

Notes: 
In our testing we found the magic layout projected over time to be the most useful tool. 
A lot of the instances were nodes being repeatedly added and removed from the buffer so it might be useful to alter the trace in order to test other actions.

